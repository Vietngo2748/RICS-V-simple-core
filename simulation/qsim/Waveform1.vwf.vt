// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/12/2024 13:39:41"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [63:0] inst_address;
// wires                                               
wire [31:0] instruction;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.inst_address(inst_address),
	.instruction(instruction)
);
initial 
begin 
#1000000 $finish;
end 
// inst_address[ 63 ]
initial
begin
	inst_address[63] = 1'b0;
end 
// inst_address[ 62 ]
initial
begin
	inst_address[62] = 1'b0;
end 
// inst_address[ 61 ]
initial
begin
	inst_address[61] = 1'b0;
end 
// inst_address[ 60 ]
initial
begin
	inst_address[60] = 1'b0;
end 
// inst_address[ 59 ]
initial
begin
	inst_address[59] = 1'b0;
end 
// inst_address[ 58 ]
initial
begin
	inst_address[58] = 1'b0;
end 
// inst_address[ 57 ]
initial
begin
	inst_address[57] = 1'b0;
end 
// inst_address[ 56 ]
initial
begin
	inst_address[56] = 1'b0;
end 
// inst_address[ 55 ]
initial
begin
	inst_address[55] = 1'b0;
end 
// inst_address[ 54 ]
initial
begin
	inst_address[54] = 1'b0;
end 
// inst_address[ 53 ]
initial
begin
	inst_address[53] = 1'b0;
end 
// inst_address[ 52 ]
initial
begin
	inst_address[52] = 1'b0;
end 
// inst_address[ 51 ]
initial
begin
	inst_address[51] = 1'b0;
end 
// inst_address[ 50 ]
initial
begin
	inst_address[50] = 1'b0;
end 
// inst_address[ 49 ]
initial
begin
	inst_address[49] = 1'b0;
end 
// inst_address[ 48 ]
initial
begin
	inst_address[48] = 1'b0;
end 
// inst_address[ 47 ]
initial
begin
	inst_address[47] = 1'b0;
end 
// inst_address[ 46 ]
initial
begin
	inst_address[46] = 1'b0;
end 
// inst_address[ 45 ]
initial
begin
	inst_address[45] = 1'b0;
end 
// inst_address[ 44 ]
initial
begin
	inst_address[44] = 1'b0;
end 
// inst_address[ 43 ]
initial
begin
	inst_address[43] = 1'b0;
end 
// inst_address[ 42 ]
initial
begin
	inst_address[42] = 1'b0;
end 
// inst_address[ 41 ]
initial
begin
	inst_address[41] = 1'b0;
end 
// inst_address[ 40 ]
initial
begin
	inst_address[40] = 1'b0;
end 
// inst_address[ 39 ]
initial
begin
	inst_address[39] = 1'b0;
end 
// inst_address[ 38 ]
initial
begin
	inst_address[38] = 1'b0;
end 
// inst_address[ 37 ]
initial
begin
	inst_address[37] = 1'b0;
end 
// inst_address[ 36 ]
initial
begin
	inst_address[36] = 1'b0;
end 
// inst_address[ 35 ]
initial
begin
	inst_address[35] = 1'b0;
end 
// inst_address[ 34 ]
initial
begin
	inst_address[34] = 1'b0;
end 
// inst_address[ 33 ]
initial
begin
	inst_address[33] = 1'b0;
end 
// inst_address[ 32 ]
initial
begin
	inst_address[32] = 1'b0;
end 
// inst_address[ 31 ]
initial
begin
	inst_address[31] = 1'b0;
end 
// inst_address[ 30 ]
initial
begin
	inst_address[30] = 1'b0;
end 
// inst_address[ 29 ]
initial
begin
	inst_address[29] = 1'b0;
end 
// inst_address[ 28 ]
initial
begin
	inst_address[28] = 1'b0;
end 
// inst_address[ 27 ]
initial
begin
	inst_address[27] = 1'b0;
end 
// inst_address[ 26 ]
initial
begin
	inst_address[26] = 1'b0;
end 
// inst_address[ 25 ]
initial
begin
	inst_address[25] = 1'b0;
end 
// inst_address[ 24 ]
initial
begin
	inst_address[24] = 1'b0;
end 
// inst_address[ 23 ]
initial
begin
	inst_address[23] = 1'b0;
end 
// inst_address[ 22 ]
initial
begin
	inst_address[22] = 1'b0;
end 
// inst_address[ 21 ]
initial
begin
	inst_address[21] = 1'b0;
end 
// inst_address[ 20 ]
initial
begin
	inst_address[20] = 1'b0;
end 
// inst_address[ 19 ]
initial
begin
	inst_address[19] = 1'b0;
end 
// inst_address[ 18 ]
initial
begin
	inst_address[18] = 1'b0;
end 
// inst_address[ 17 ]
initial
begin
	inst_address[17] = 1'b0;
end 
// inst_address[ 16 ]
initial
begin
	inst_address[16] = 1'b0;
end 
// inst_address[ 15 ]
initial
begin
	inst_address[15] = 1'b0;
end 
// inst_address[ 14 ]
initial
begin
	inst_address[14] = 1'b0;
end 
// inst_address[ 13 ]
initial
begin
	inst_address[13] = 1'b0;
end 
// inst_address[ 12 ]
initial
begin
	inst_address[12] = 1'b0;
end 
// inst_address[ 11 ]
initial
begin
	inst_address[11] = 1'b0;
end 
// inst_address[ 10 ]
initial
begin
	inst_address[10] = 1'b0;
end 
// inst_address[ 9 ]
initial
begin
	inst_address[9] = 1'b0;
end 
// inst_address[ 8 ]
initial
begin
	inst_address[8] = 1'b0;
end 
// inst_address[ 7 ]
initial
begin
	inst_address[7] = 1'b0;
end 
// inst_address[ 6 ]
initial
begin
	inst_address[6] = 1'b0;
end 
// inst_address[ 5 ]
initial
begin
	inst_address[5] = 1'b0;
end 
// inst_address[ 4 ]
initial
begin
	inst_address[4] = 1'b0;
end 
// inst_address[ 3 ]
initial
begin
	inst_address[3] = 1'b0;
end 
// inst_address[ 2 ]
initial
begin
	inst_address[2] = 1'b0;
end 
// inst_address[ 1 ]
initial
begin
	inst_address[1] = 1'b0;
end 
// inst_address[ 0 ]
initial
begin
	inst_address[0] = 1'b0;
end 
endmodule

